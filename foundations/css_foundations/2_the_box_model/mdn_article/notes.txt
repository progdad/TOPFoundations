The most crucial css skills are positioning and layout!
This is where "The Box Model" enters the game.
It's called that way because each element is essentially 
a box, the shape of which is square or rectangular. 
And to be efficient and not frustrated in 
laying out and manipulating the boxes, the first things to learn are:
    "margin" - distance between an element and its environment.
    "padding" - distance between the content and the border.
    "border" - the space between margin and padding, a border.

*****

Source: https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model

1. Block and inline boxes.

1.1. If a box has an outer display type of "block", then:
    - The box will break onto a new line.
    - The "width" and "height" properties are respected.
    - "Padding", "margin" and "border" will cause 
        other elements to be pushed away from the box.
    - If "width" is not specified, the box will extend in the inline direction 
        to fill the space available in its container. 
        In most cases, the box will become as wide as its container, 
        filling up 100% of the space available.

    Some HTML elements, such as <h1> and <p>, use block as their outer display type by default.

1.2. If a box has an outer display type of "inline", then:
    - The box will not break onto a new line.
    - The "width" and "height" properties will not apply.
    - Top and bottom "padding", "margins", and "borders" will apply 
        but will not cause other inline boxes to move away from the box.
    
    # There is another VERY important meaning of that: 
        Margins and paddings of elements that neighbor 
    with inline elements count their indents between them and those inline elements
    without considering the neighbors' paddings,, borders and margins.

    
    - Left and right "padding", "margins", and "borders" will apply 
        and will cause other inline boxes to move away from the box.

    Some HTML elements, such as <a>, <span>, <em> and <strong> 
    use inline as their outer display type by default.

"block" and "inline" are outer display types, whereas there are lots of inner types(later about it). 

*****

2. Margins, paddings and borders.

2.1. Margin:
    It is an invisible space around your box. 
    It pushes other elements away from the box. 
    Margins can have positive or negative values.

    We can control all margins of an element at once using the margin property, 
    or each side individually using the equivalent longhand properties:
        - margin-top
        - margin-right
        - margin-bottom
        - margin-left

    2.1.0. Margin collapsing

    Depending on whether two elements whose margins touch 
    have positive or negative margins, the results will be different:
        - Two positive margins will combine to become one margin. 
            Its size will be equal to the largest individual margin.
        - Two negative margins will collapse 
            and the smallest (furthest from zero) value will be used.
        - If one margin is negative, its value will be subtracted from the total.

    2.1.1. Margin property  can accept up to 4 values:
        selector {
            margin: top, right, left, bottom;
                or
            margin: top, left-and-right, bottom;
                or
            margin: top-and-bottom, left-and-right;
        }
        
        1 value's applied to all 4 sides.


2.2. Borders.
    The border is drawn between the margin and the padding of a box. 
    If you are using the standard box model, the size of the border 
    is added to the width and height of the content box. 
    If you are using the alternative box model then 
    the size of the border makes the content box smaller 
    as it takes up some of that available width and height of the element box.

    https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model#borders

2.3. Padding.
    The padding sits between the border and the content area 
    and is used to push the content away from the border. 
    Unlike margins, you cannot have a negative padding. 
    Any background applied to your element will display behind the padding.

*****

3. "display: inline-block".
    It is is a special value of display, which provides a middle ground between "inline" and "block". 
    Use it if you do not want an item to break onto a new line, 
    but do want it to respect width and height and avoid the overlapping. 
    What it actually does:
    - The width and height properties are respected.
    - "padding", "margin", and "border" will cause other elements to be pushed away from the box.
    - It does not, however, break onto a new line, and will only become larger than its content 
        if you explicitly add width and height properties.
