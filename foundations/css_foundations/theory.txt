https://www.theodinproject.com/lessons/foundations-css-foundations#type-selectors

*****

1. BASIC SYNTAX:

selector {
    property: value
}

1.1.
Selectors are just references to html elements,
    to which css rules, listed in curly brackets, will be applied.

1.2. Types of selectors.
    1. Universal(select everything, any type) - "*".
    2. Type(select all elements of the given type) - "<name of a tag>".
    3. Class(select all elements of the given class) - ".<class-name>".
        Multi-class is possible.
    4. ID(id is id, must be unique for each element) - "#<title>".

*****

2. BASIC PROPERTIES:

---

2.1.
"color", "background-color" - accept a keyword, such as "red" or "transparent".
    Also accept HEX, RGD and HSL.

---

2.2. Typography Basics and Text-Align.

"font-family" - can be a single value or a comma-separated list of values 
    that determine what font an element uses.
    There are two categories: 
        1. "Quotes fonts"(because of the space in the name)
        2. dash-fonts(don't use quotes).
        E.g. "DejaVu Sans", sans-serif.
    If a browser cannot find or does not support the first font in a list, 
    it will use the next one, then the next one and so on 
    until it finds a supported and valid font.

"font-size" - is what it sound like. No whitespace, when setting a value(20px).

"font-weight" - accepts a keyword or a number between 1 and 1000.

"text-align" - aligns text horizontally within an element.
    Accepts keywords such as "center", "right", etc.
    Default value is "left".

*****

3. Image Height and Width.

If you wanted to adjust the size of the image 
without causing it to lose its proportions, 
you would use a value of “auto” for the height property 
and adjust the width value.

It's always better to set both height and width.

*****

4. THE CASCADE OF CSS.

* Some examples for specificity are in the 
  ./basic_syntax/lesson-1.html file, section 3.

*** "The Odin Project" note: 
    The cascade is what determines which rules actually get applied to our HTML. 
    There are different factors that the cascade uses to determine this, 
    three of which we’ll go over to hopefully help you avoid (as many of) 
    those frustrating “I hate CSS” moments.

4.1. Specificity.
    A CSS declaration that is more specific will take precedence over less specific ones. 
    Inline styles have the highest specificity compared to selectors(about them is talked later), 
    while each type of selector has its own specificity level 
    that contributes to how specific a declaration is.
    Other selectors contribute to specificity, 
    but we’re focusing only on the ones mentioned in this lesson:
        1. ID selectors (most specific selector)
        2. Class selectors
        3. Type selectors

    Specificity will only be taken into account when an element has multiple, 
    conflicting declarations targeting it.
    An ID selector will always beat any number of class selectors, 
    a class selector will always beat any number of type selectors, 
    and a type selector will always beat any number of anything less specific than it. 
    When no declaration has a selector with a higher specificity, 
    a larger amount of a single selector will beat a smaller amount of that same selector.

    When comparing selectors, you may come across special symbols for the universal selector (*) 
    as well as combinators (+, ~, >, and an empty space). 
    These symbols do not add any specificity in and of themselves.

4.2 Inheritance.
    Inheritance refers to certain CSS properties that, when applied to an element, 
    are inherited by that element’s descendants, 
    even if we don’t explicitly write a rule for those descendants. 
    Typography based properties (color, font-size, font-family, etc.) 
    are usually inherited, while most other properties aren’t.

    * Look an example on the website.

4.3 Rule Order.
    The final factor, the end of the line, the tie-breaker of the tie-breaker. 
    Let’s say that after every other factor has been taken into account, 
    there are still multiple conflicting rules targeting an element. 
    How does the cascade determine which rule to apply?

    Really simply, actually. Whichever rule was the last defined is the winner.

        .alert {
          color: red;
        }

        .warning {
          color: yellow;
        }

    For an element that has both the "alert" and "warning" classes, 
    the cascade would run through every other factor, including inheritance (none here) 
    and specificity (neither rule is more specific than the other). 
    Since the ".warning" rule was the last one defined, 
    and no other factor was able to determine which rule to apply, 
    it’s the one that gets applied to the element.
